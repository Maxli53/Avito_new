[tool.poetry]
name = "avito-pipeline"
version = "1.0.0"
description = "Comprehensive testing framework for Avito Pipeline - Production-ready snowmobile data processing"
authors = ["Pipeline Team <team@avitoplatform.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/avitoplatform/pipeline"
repository = "https://github.com/avitoplatform/pipeline"
documentation = "https://pipeline-docs.avitoplatform.com"
keywords = ["pipeline", "testing", "snowmobile", "avito", "data-processing"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance"
]

[tool.poetry.dependencies]
python = "^3.9"
# Core dependencies
sqlite3 = {version = "*", optional = true}
pathlib = {version = "*", optional = true}
dataclasses = {version = "*", optional = true}
typing-extensions = "^4.8.0"
pydantic = "^2.4.0"

# Testing dependencies
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.3.0"
pytest-mock = "^3.11.0"
pytest-asyncio = "^0.21.0"
pytest-timeout = "^2.1.0"
pytest-benchmark = "^4.0.0"
pytest-html = "^3.2.0"
pytest-json-report = "^1.5.0"
coverage = {extras = ["toml"], version = "^7.3.0"}

# Quality assurance
black = "^23.9.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.6.0"
bandit = "^1.7.5"
safety = "^2.3.0"

# Documentation
sphinx = {version = "^7.2.0", optional = true}
sphinx-rtd-theme = {version = "^1.3.0", optional = true}

[tool.poetry.group.dev.dependencies]
# Development tools
pre-commit = "^3.4.0"
tox = "^4.11.0"
invoke = "^2.2.0"

# Advanced testing
pytest-randomly = "^3.15.0"
pytest-sugar = "^0.9.7"
pytest-clarity = "^1.0.1"
pytest-icdiff = "^0.8"
mutmut = "^2.4.0"
hypothesis = "^6.87.0"

# Performance monitoring
memory-profiler = "^0.61.0"
py-spy = "^0.3.14"
line-profiler = "^4.1.0"

# Security testing
semgrep = "^1.45.0"
pip-audit = "^2.6.0"

[tool.poetry.group.test.dependencies]
# Test utilities
faker = "^19.6.0"
factory-boy = "^3.3.0"
freezegun = "^1.2.0"
responses = "^0.23.0"
requests-mock = "^1.11.0"

[tool.poetry.extras]
docs = ["sphinx", "sphinx-rtd-theme"]
all = ["sqlite3", "pathlib", "dataclasses", "sphinx", "sphinx-rtd-theme"]

[tool.poetry.scripts]
run-tests = "scripts.test_runner:main"
quality-check = "scripts.quality_check:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=pipeline", 
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
    "--tb=short",
    "-v"
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interaction", 
    "e2e: End-to-end pipeline tests",
    "performance: Performance and load tests",
    "slow: Tests that take more than 5 seconds",
    "database: Tests requiring database setup",
    "external: Tests requiring external services (FTP, Claude API)",
    "extraction: Tests for Stage 1 - Data Extraction",
    "matching: Tests for Stage 2 - Matching Engine",
    "validation: Tests for Stage 3 - Validation",
    "generation: Tests for Stage 4 - XML Generation", 
    "upload: Tests for Stage 5 - Upload Pipeline",
    "bert: Tests requiring BERT models",
    "llm: Tests requiring LLM access",
    "ftp: Tests requiring FTP server access",
    "business_critical: Tests for critical business workflows",
    "seasonal: Tests for seasonal functionality",
    "data_integrity: Tests for data consistency and integrity"
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore::UserWarning:transformers",
    "ignore::UserWarning:torch"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
junit_family = "xunit2"
collect_ignore = ["setup.py"]

# ============================================================================
# COVERAGE CONFIGURATION
# ============================================================================

[tool.coverage.run]
source = ["core", "pipeline"]
branch = true
omit = [
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "conftest.py",
    "**/conftest.py"
]
parallel = true
context = "${CONTEXT}"

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# CODE QUALITY CONFIGURATION  
# ============================================================================

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["core", "pipeline", "tests"]
known_third_party = ["pytest", "pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
select = ["C", "E", "F", "W", "B", "B950"]
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".tox",
    "*.egg-info"
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "sqlite3.*",
    "pathlib.*",
    "pytest.*",
    "hypothesis.*"
]
ignore_missing_imports = true

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/*_test.py"]

# ============================================================================
# BUILD AND DEPLOYMENT
# ============================================================================

[tool.setuptools_scm]
write_to = "core/_version.py"

[tool.wheel]
universal = false

# ============================================================================
# DEVELOPMENT WORKFLOW
# ============================================================================

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py39,py310,py311,py312,coverage,lint,security

[testenv]
deps = poetry
commands_pre = poetry install --with dev,test
commands = poetry run pytest {posargs}

[testenv:coverage]
commands = 
    poetry run coverage erase
    poetry run coverage run -m pytest
    poetry run coverage report
    poetry run coverage html

[testenv:lint]
commands =
    poetry run black --check .
    poetry run isort --check-only .
    poetry run flake8 .
    poetry run mypy .

[testenv:security]
commands = 
    poetry run bandit -r .
    poetry run safety check
"""