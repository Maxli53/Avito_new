version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: snowmobile-db
    environment:
      POSTGRES_USER: snowmobile
      POSTGRES_PASSWORD: snowmobile_secret
      POSTGRES_DB: snowmobile_recon
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snowmobile"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - snowmobile-network

  # Redis Cache (for rate limiting and caching)
  redis:
    image: redis:7-alpine
    container_name: snowmobile-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - snowmobile-network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: snowmobile-app
    environment:
      # Database
      DATABASE_URL: postgresql://snowmobile:snowmobile_secret@postgres:5432/snowmobile_recon
      DB_POOL_SIZE: 10
      DB_MAX_OVERFLOW: 20
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Application
      ENVIRONMENT: development
      DEBUG_MODE: "true"
      HOST: 0.0.0.0
      PORT: 8000
      
      # Claude API (set your actual key)
      CLAUDE_API_KEY: ${CLAUDE_API_KEY:-sk-ant-your-key-here}
      CLAUDE_MODEL: claude-3-haiku-20240307
      CLAUDE_MAX_TOKENS: 4000
      
      # Pipeline
      PIPELINE_AUTO_ACCEPT_THRESHOLD: 0.9
      PIPELINE_MANUAL_REVIEW_THRESHOLD: 0.7
      PIPELINE_ENABLE_SPRING_OPTIONS: "true"
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      API_KEY_ENABLED: "false"
      
      # Monitoring
      MONITORING_LOG_LEVEL: INFO
      MONITORING_METRICS_ENABLED: "true"
      MONITORING_PROMETHEUS_ENABLED: "true"
      
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./data:/app/data
    networks:
      - snowmobile-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: snowmobile-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - snowmobile-network
    depends_on:
      - app

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: snowmobile-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - snowmobile-network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: snowmobile-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - snowmobile-network
    depends_on:
      - app
    profiles:
      - production

networks:
  snowmobile-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: